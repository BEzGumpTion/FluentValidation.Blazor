@page "/"

<h1>Form 1: Inline Validation</h1>

<EditForm Model="Form1">
    <FluentValidator Validator="Form1Validator"></FluentValidator>
    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="Form1.Name"></InputText>
        <ValidationMessage For="() => Form1.Name"></ValidationMessage>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">
            Submit
        </button>
    </div>
</EditForm>

<h1>Form 2: Dependency Injection Validation</h1>

<EditForm Model="Form2">
    <FluentValidator></FluentValidator>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="Form2.Email"></InputText>
        <ValidationMessage For="() => Form2.Email"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="child">Field of a Nested Object</label>
        <InputText id="child" class="form-control" @bind-Value="Form2.FormModel3.SubField"></InputText>
        <ValidationMessage For="() => Form2.FormModel3.SubField"></ValidationMessage>
    </div>
    @foreach (var item in Form2.SubArray)
    {
        <div class="form-group">
            <label for="item1">Field of an Array [Item #@(Form2.SubArray.IndexOf(item))]</label>
            <InputText id="item1" class="form-control" @bind-Value="item.SubField"></InputText>
            <ValidationMessage For="() => item.SubField"></ValidationMessage>
        </div>
    }
    <div class="form-group">
        <label for="novalidate">Should Not Validate</label>
        <InputText id="novalidate" class="form-control" @bind-Value="Form2.NotAForm.ShouldNotValidate"></InputText>
    </div>
    <div class="form-group">
        <ValidationSummary></ValidationSummary>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">
            Submit
        </button>
    </div>
</EditForm>

@using FluentValidation;
@code {
    class FormModel1
    {
        public string Name { set; get; }
    }

    class FormModel1Validator : AbstractValidator<FormModel1>
    {
        public FormModel1Validator()
        {
            RuleFor(Q => Q.Name).NotEmpty().MinimumLength(2).MaximumLength(8);
        }
    }

    FormModel1 Form1 = new FormModel1();
    FormModel1Validator Form1Validator = new FormModel1Validator();

    FormModel2 Form2 = new FormModel2
    {
        FormModel3 = new FormModel3(),
        SubArray = new List<FormModel3> { new FormModel3 { }, new FormModel3 { } },
        NotAForm = new MustNotValidate()
    };
}